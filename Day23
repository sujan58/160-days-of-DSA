class Solution:
    def mergeOverlap(self, arr):
        # Sort intervals based on the starting time
        arr.sort(key=lambda x: x[0])
        
        # Resultant list to store merged intervals
        merged = []
        
        for interval in arr:
            # If merged is empty or current interval doesn't overlap with the last merged one
            if not merged or merged[-1][1] < interval[0]:
                merged.append(interval)
            else:
                # Overlapping intervals, merge them
                merged[-1][1] = max(merged[-1][1], interval[1])
        
        return merged

# Driver Code
if __name__ == '__main__':
    T = int(input())
    for _ in range(T):
        n = int(input())
        arr = []
        for i in range(n):
            x, y = map(int, input().strip().split())
            arr.append([x, y])
        obj = Solution()
        ans = obj.mergeOverlap(arr)
        for i in ans:
            for j in i:
                print(j, end=" ")
        print()
``
