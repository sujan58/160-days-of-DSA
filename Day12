def circularSubarraySum(arr):
    def kadane(arr):
        max_ending_here = max_so_far = arr[0]
        for x in arr[1:]:
            max_ending_here = max(x, max_ending_here + x)
            max_so_far = max(max_so_far, max_ending_here)
        return max_so_far

    max_kadane = kadane(arr)
    total_sum = sum(arr)
    min_ending_here = min_so_far = arr[0]
    for x in arr[1:]:
        min_ending_here = min(x, min_ending_here + x)
        min_so_far = min(min_so_far, min_ending_here)
    
    max_circular = total_sum - min_so_far
    
    if max_circular == 0:
        return max_kadane

    return max(max_kadane, max_circular)

if __name__ == "__main__":
    T = int(input())
    while T > 0:
        arr = list(map(int, input().strip().split()))
        print(circularSubarraySum(arr))
        T -= 1
